@model SesliKitapWeb.Models.ProfileViewModel
@{
    ViewData["Title"] = $"{Model.User.FirstName} {Model.User.LastName} - Profil";
}

<style>
    .profile-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 15px;
        padding: 3rem 2rem;
        color: white;
        margin-bottom: 2rem;
        position: relative;
        overflow: hidden;
    }
    
    .profile-header::before {
        content: '';
        position: absolute;
        top: -50%;
        right: -50%;
        width: 200%;
        height: 200%;
        background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><circle cx="50" cy="50" r="2" fill="rgba(255,255,255,0.1)"/></svg>');
        opacity: 0.3;
        animation: float 20s infinite linear;
    }
    
    @@keyframes float {
        0% { transform: translate(0, 0); }
        100% { transform: translate(-50px, -50px); }
    }
    
    .profile-avatar {
        width: 120px;
        height: 120px;
        border-radius: 50%;
        background: linear-gradient(135deg, #ffeaa7 0%, #fdcb6e 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 3rem;
        font-weight: bold;
        color: #2d3436;
        border: 5px solid white;
        box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        margin: 0 auto 1rem;
        position: relative;
        z-index: 1;
    }
    
    .profile-info {
        text-align: center;
        position: relative;
        z-index: 1;
    }
    
    .profile-name {
        font-size: 2rem;
        font-weight: bold;
        margin-bottom: 0.5rem;
    }
    
    .profile-username {
        font-size: 1.1rem;
        opacity: 0.9;
        margin-bottom: 1.5rem;
    }
    
    .profile-stats {
        display: flex;
        justify-content: center;
        gap: 3rem;
        margin-top: 1.5rem;
    }
    
    .stat-item {
        text-align: center;
        cursor: pointer;
        transition: transform 0.2s;
    }
    
    .stat-item:hover {
        transform: translateY(-5px);
    }
    
    .stat-number {
        font-size: 2rem;
        font-weight: bold;
        display: block;
    }
    
    .stat-label {
        font-size: 0.9rem;
        opacity: 0.9;
        margin-top: 0.5rem;
    }
    
    .action-buttons {
        margin-top: 1.5rem;
        display: flex;
        justify-content: center;
        gap: 1rem;
    }
    
    .profile-content {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 1.5rem;
        margin-top: 2rem;
    }
    
    .book-card {
        background: white;
        border-radius: 15px;
        padding: 1.5rem;
        box-shadow: 0 2px 10px rgba(0,0,0,0.08);
        transition: all 0.3s ease;
        border: 1px solid rgba(0,0,0,0.05);
    }
    
    .book-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.15);
    }
    
    .book-image {
        width: 100%;
        height: 250px;
        object-fit: cover;
        border-radius: 10px;
        margin-bottom: 1rem;
    }
    
    .book-title {
        font-size: 1.1rem;
        font-weight: bold;
        color: #2d3436;
        margin-bottom: 0.5rem;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }
    
    .book-author {
        color: #636e72;
        font-size: 0.9rem;
        margin-bottom: 1rem;
    }
    
    .empty-state {
        text-align: center;
        padding: 4rem 2rem;
        color: #636e72;
    }
    
    .empty-state-icon {
        font-size: 4rem;
        margin-bottom: 1rem;
        opacity: 0.5;
    }
    
    .section-header {
        font-size: 1.5rem;
        font-weight: bold;
        color: #2d3436;
        margin-bottom: 1.5rem;
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }
    
    .section-header i {
        color: #667eea;
    }
    
    .btn-follow {
        background: white;
        color: #667eea;
        border: 2px solid white;
        font-weight: 600;
        padding: 0.6rem 2rem;
        border-radius: 25px;
        transition: all 0.3s;
    }
    
    .btn-follow:hover {
        background: rgba(255,255,255,0.9);
        transform: scale(1.05);
    }
    
    .btn-unfollow {
        background: transparent;
        color: white;
        border: 2px solid white;
        font-weight: 600;
        padding: 0.6rem 2rem;
        border-radius: 25px;
        transition: all 0.3s;
    }
    
    .btn-unfollow:hover {
        background: white;
        color: #667eea;
        transform: scale(1.05);
    }
    
    .page-container {
        max-width: 1200px;
        margin: 0 auto;
    }
    
    @@media (max-width: 768px) {
        .profile-stats {
            gap: 1.5rem;
        }
        
        .profile-header {
            padding: 2rem 1.5rem;
        }
        
        .profile-name {
            font-size: 1.5rem;
        }
    }
</style>

<div class="page-container">
    <!-- Profile Header -->
    <div class="profile-header">
        <div class="profile-avatar">
            @Model.User.FirstName[0]@Model.User.LastName[0]
        </div>
        <div class="profile-info">
            <h1 class="profile-name">@Model.User.FirstName @Model.User.LastName</h1>
            <div class="profile-username">@@@Model.User.UserName</div>
            
            <div class="profile-stats">
                <div class="stat-item">
                    <a href="@Url.Action("Followers", "Account", new { id = Model.User.Id })" style="color: white; text-decoration: none;">
                        <span class="stat-number">@Model.FollowersCount</span>
                        <span class="stat-label">Takipçi</span>
                    </a>
                </div>
                <div class="stat-item">
                    <a href="@Url.Action("Following", "Account", new { id = Model.User.Id })" style="color: white; text-decoration: none;">
                        <span class="stat-number">@Model.FollowingCount</span>
                        <span class="stat-label">Takip Edilen</span>
                    </a>
                </div>
                <div class="stat-item">
                    <span class="stat-number">@Model.UserBooks.Count</span>
                    <span class="stat-label">Kitap</span>
                </div>
            </div>
            
            @if (!Model.IsCurrentUser)
            {
                <div class="action-buttons">
                    @if (Model.IsFollowing)
                    {
                        <form asp-controller="Follows" asp-action="Unfollow" asp-route-id="@Model.User.Id" method="post" class="d-inline">
                            <button type="submit" class="btn btn-unfollow">
                                <i class="bi bi-person-dash-fill me-1"></i>Takipten Çık
                            </button>
                        </form>
                    }
                    else
                    {
                        <form asp-controller="Follows" asp-action="Follow" asp-route-id="@Model.User.Id" method="post" class="d-inline">
                            <button type="submit" class="btn btn-follow">
                                <i class="bi bi-person-plus-fill me-1"></i>Takip Et
                            </button>
                        </form>
                    }
                </div>
            }
            else
            {
                <div class="action-buttons">
                    <a href="@Url.Action("PendingRequests", "Follows")" class="btn btn-follow">
                        <i class="bi bi-inbox me-1"></i>Takip İstekleri
                    </a>
                    <a href="@Url.Action("MyBooks", "Account")" class="btn btn-follow">
                        <i class="bi bi-book-fill me-1"></i>Kitaplarımı Görüntüle
                    </a>
                </div>
            }
        </div>
    </div>
    
    <!-- User Books Section -->
    <div class="mt-4">
        <h2 class="section-header">
            <i class="bi bi-bookshelf"></i>
            @(Model.IsCurrentUser ? "Kitaplarım" : $"{Model.User.FirstName}'in Kitapları")
        </h2>
        
        @if (Model.UserBooks != null && Model.UserBooks.Any())
        {
            <div class="profile-content">
                @foreach (var book in Model.UserBooks)
                {
                    <div class="book-card">
                        @if (!string.IsNullOrEmpty(book.CoverImageUrl))
                        {
                            <img src="~/uploads/@book.CoverImageUrl" alt="@book.Title" class="book-image" />
                        }
                        else
                        {
                            <div class="book-image bg-light d-flex align-items-center justify-content-center">
                                <i class="bi bi-book text-muted" style="font-size: 4rem;"></i>
                            </div>
                        }
                        <h5 class="book-title">@book.Title</h5>
                        <p class="book-author">@book.Author</p>
                        <a href="@Url.Action("Details", "Books", new { id = book.Id })" class="btn btn-primary btn-sm w-100">
                            <i class="bi bi-eye-fill me-1"></i>İncele
                        </a>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="empty-state">
                <div class="empty-state-icon">
                    <i class="bi bi-book"></i>
                </div>
                <h3>Henüz kitap eklenmemiş</h3>
                <p>@(Model.IsCurrentUser ? "Profilinize kitap ekleyerek başlayabilirsiniz." : $"{Model.User.FirstName} henüz hiç kitap eklememiş.")</p>
                @if (Model.IsCurrentUser)
                {
                    <a href="@Url.Action("MyBooks", "Account")" class="btn btn-primary mt-3">
                        <i class="bi bi-plus-circle-fill me-1"></i>Kitap Ekle
                    </a>
                }
            </div>
        }
    </div>
</div>
